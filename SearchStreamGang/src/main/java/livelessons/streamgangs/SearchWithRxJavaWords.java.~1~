package livelessons.streamgangs;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import livelessons.utils.SearchResults;
import livelessons.utils.StreamsUtils;
import rx.Observable;
import rx.schedulers.Schedulers;

import static java.util.stream.Collectors.toList;

/**
 * Customizes the SearchStreamGangCommon framework to use
 * CompletableFutures in conjunction with Java Streams to search how
 * many times each word in an array of words appears in input data.
 * words.
 */
public class SearchWithRxJavaWords
        extends SearchStreamGang {
    /**
     * Constructor initializes the super class.
     */
    public SearchWithRxJavaWords(List<String> wordsToFind,
                                 String[][] stringsToSearch) {
        // Pass input to superclass constructor.
        super(wordsToFind,
                stringsToSearch);
    }

    @Override
    protected List<List<SearchResults>> processStream() {
        // Convert the input strings into a list of futures.
        List<List<SearchResults>> result = new ArrayList<>();
        Observable.from(mWordsToFind)
                  .map(this::processInputAsync)
                  .flatMap(t -> t)
                  .toBlocking()
                  .forEach(result::add);

        return result;
    }

    private Observable<List<SearchResults>> processInputAsync(String word) {
        return Observable.from(getInput())
                         .flatMap(line -> Observable.<SearchResults>create(subscriber -> {
                            String title = getTitle(line);
                            String input = line.substring(title.length());
                            SearchResults searchResults = searchForWord(word, input, title);
                            subscriber.onNext(searchResults);
                            subscriber.onCompleted();
                         }).subscribeOn(Schedulers.computation()))
                         .toList();
    }
}
